################################################################
# lha_ja.properties
# $Revision: 1.1 $
#===============================================================
# LHA Library for Java の設定ファイル
#===============================================================
# Copyright (C) 2002  Michel Ishizuka  All rights reserved.
# 
# 以下の条件に同意するならばソースとバイナリ形式の再配布と使用を
# 変更の有無にかかわらず許可する。
# 
# １．ソースコードの再配布において著作権表示と この条件のリスト
#     および下記の声明文を保持しなくてはならない。
# 
# ２．バイナリ形式の再配布において著作権表示と この条件のリスト
#     および下記の声明文を使用説明書もしくは その他の配布物内に
#     含む資料に記述しなければならない。
# 
# このソフトウェアは石塚美珠瑠によって無保証で提供され、特定の目
# 的を達成できるという保証、商品価値が有るという保証にとどまらず、
# いかなる明示的および暗示的な保証もしない。
# 石塚美珠瑠は このソフトウェアの使用による直接的、間接的、偶発
# 的、特殊な、典型的な、あるいは必然的な損害(使用によるデータの
# 損失、業務の中断や見込まれていた利益の遺失、代替製品もしくは
# サービスの導入費等が考えられるが、決してそれだけに限定されない
# 損害)に対して、いかなる事態の原因となったとしても、契約上の責
# 任や無過失責任を含む いかなる責任があろうとも、たとえそれが不
# 正行為のためであったとしても、またはそのような損害の可能性が報
# 告されていたとしても一切の責任を負わないものとする。
# 
################################################################


#===============================================================
# key  : lha.encoding
#---------------------------------------------------------------
# val  : Javaのエンコーディング名。
#        ( 例 ISO8859_1, ASCII, SJIS, 等 )
#        この値はLHAヘッダ内の文字列を String に変換するために
#        使用される。
#        もし、エンコーディング名が正しく設定されない場合、文字
#        化けの原因となる。この文字化けは、解凍できないファイル
#        や、削除できないファイルを作成してしまう原因となる。
#        また 日本語を扱う場合は シフトJIS系列のエンコーディング
#        を指定すること。EUC系列やJIS系列のエンコーディングを使
#        用した書庫は混乱の元になるので、配布や公開は禁止とする。
#        シフトJIS系列のエンコーディングの扱いの複雑さを考慮して、
#        Javaのエンコーディング名にはない、ShiftJISAuto も使用で
#        きる。これは、Javaのシステムプロパティ file.encoding を
#        参照してそれがシフトJIS系列であればそれを使用し、違えば
#        SJIS を使用する。
#===============================================================
lha.encoding=ShiftJISAuto
#lha.encoding=MS932
#lha.encoding=SJIS
#lha.encoding=ISO8859_1


#===============================================================
# key  : lha.lzs.encoder
#        lha.lz5.encoder
#        lha.lh1.encoder
#        lha.lh2.encoder
#        lha.lh3.encoder
#        lha.lh4.encoder
#        lha.lh5.encoder
#        lha.lh6.encoder
#        lha.lh7.encoder
#        lha.lz4.encoder
#        lha.lh0.encoder
#        lha.lhd.encoder
#---------------------------------------------------------------
# val  : 対応する圧縮法の符号器の生成式
#        この値は LhaOutputStream、LhaRetainedOutputStream、
#        LhaImmediateOutputStream が圧縮処理を行う際に
#        圧縮法に対応した符号器を生成するために使用される。
#===============================================================
lha.lzs.encoder=LzssOutputStream(PostLzsEncoder(out),HashAndChainedListSearch,[HashShort])
lha.lz5.encoder=LzssOutputStream(PostLz5Encoder(out),HashAndChainedListSearch)
lha.lh1.encoder=LzssOutputStream(PostLh1Encoder(out),HashAndChainedListSearch)
lha.lh2.encoder=LzssOutputStream(PostLh2Encoder(out),HashAndChainedListSearch)
lha.lh3.encoder=LzssOutputStream(PostLh3Encoder(out),HashAndChainedListSearch)
lha.lh4.encoder=LzssOutputStream(PostLh5Encoder(out,-lh4-),HashAndChainedListSearch)
lha.lh5.encoder=LzssOutputStream(PostLh5Encoder(out,-lh5-),HashAndChainedListSearch)
lha.lh6.encoder=LzssOutputStream(PostLh5Encoder(out,-lh6-),HashAndChainedListSearch)
lha.lh7.encoder=LzssOutputStream(PostLh5Encoder(out,-lh7-),HashAndChainedListSearch)
lha.lz4.encoder=out
lha.lh0.encoder=out
lha.lhd.encoder=out


#===============================================================
# key  : lha.lzs.decoder
#        lha.lz5.decoder
#        lha.lh1.decoder
#        lha.lh2.decoder
#        lha.lh3.decoder
#        lha.lh4.decoder
#        lha.lh5.decoder
#        lha.lh6.decoder
#        lha.lh7.decoder
#        lha.lz4.decoder
#        lha.lh0.decoder
#        lha.lhd.decoder
#---------------------------------------------------------------
# val  : 対応する圧縮法の復号器の生成式
#        この値は LhaInputStream、LhaFile が解凍処理を行う際に
#        圧縮法に対応した復号器を生成するために使用される。
#        また LhaOutputStream、LhaRetainedOutputStream で
#        圧縮に失敗した際の解凍のためにも使用される。
#===============================================================
lha.lzs.decoder=LzssInputStream(PreLzsDecoder(in),length)
lha.lz5.decoder=LzssInputStream(PreLz5Decoder(in),length)
lha.lh1.decoder=LzssInputStream(PreLh1Decoder(in),length)
lha.lh2.decoder=LzssInputStream(PreLh2Decoder(in),length)
lha.lh3.decoder=LzssInputStream(PreLh3Decoder(in),length)
lha.lh4.decoder=LzssInputStream(PreLh5Decoder(in,-lh4-),length)
lha.lh5.decoder=LzssInputStream(PreLh5Decoder(in,-lh5-),length)
lha.lh6.decoder=LzssInputStream(PreLh5Decoder(in,-lh6-),length)
lha.lh7.decoder=LzssInputStream(PreLh5Decoder(in,-lh7-),length)
lha.lz4.decoder=in
lha.lh0.decoder=in
lha.lhd.decoder=in


#===============================================================
# key  : lha.header
#---------------------------------------------------------------
# val  : LhaHeader, もしくは LhaHeader のサブクラスの生成式。
#        この値は LhaInputStream、LhaFile が読み込んだ
#        ヘッダデータから LhaHeader のインスタンスを生成するため
#        に使用される。
#===============================================================
lha.header=LhaHeader(data,encoding)

